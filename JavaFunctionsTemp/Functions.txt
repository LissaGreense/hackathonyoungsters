public static double coordinatesToDistance(double latitiudeDevice, double latitiudeStop, double longtitiudeDevice,double longtitiudeStop)
    {

        final int RADIUS = 6371;
        double latDistance = Math.toRadians(latitiudeStop - latitiudeDevice);
        double lonDistance = Math.toRadians(longtitiudeStop - longtitiudeDevice);
        double tempDistance = Math.sin(latDistance / 2) * Math.sin(latDistance / 2)
                + Math.cos(Math.toRadians(latitiudeDevice)) * Math.cos(Math.toRadians(latitiudeStop))
                * Math.sin(lonDistance / 2) * Math.sin(lonDistance / 2);
        tempDistance = 2 * Math.atan2(Math.sqrt(tempDistance), Math.sqrt(1 - tempDistance));
        double distance = RADIUS * tempDistance * 1000;
        return Math.abs(distance);
    }
public static int getNearestStop(double latitiudeDevice,double longtitiudeDevice,JSONArray stopsList) throws JSONException {
        double maxWayToStop = 99999;
        int closestStop = 0;
        for(int i =0;i<stopsList.length();i++)
        {
            JSONObject stop = stopsList.getJSONObject(i);
            int id = stop.getInt("stopId");
            double latitiudeStop = stop.getDouble("stopLat");
            double longitiudeStop = stop.getDouble("stopLon");
            double distanceToThisStop = coordinatesToDistance(latitiudeDevice,latitiudeStop,longtitiudeDevice,longitiudeStop);
            if(distanceToThisStop < maxWayToStop)
            {
                maxWayToStop = distanceToThisStop;
                closestStop = id;
            }
        }
        return closestStop;
    }
	
	private void configureGPS(){
        LocationManager locationManager = (LocationManager)
                getSystemService(Context.LOCATION_SERVICE);

        LocationListener locationListener = new LocationListener() {
            @Override
            public void onLocationChanged(Location location) {
                lat.setText(location.getLatitude()+"");
                lon.setText(location.getLongitude()+"");
            }

            @Override
            public void onStatusChanged(String provider, int status, Bundle extras) {

            }

            @Override
            public void onProviderEnabled(String provider) {

            }

            @Override
            public void onProviderDisabled(String provider) {

            }
        };
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
            return;
        }
        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locationListener);
        locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, locationListener);
    }